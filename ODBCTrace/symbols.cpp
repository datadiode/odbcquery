#include "stdafx.h"
#include "symbols.h"

#define $(x,y) case y: C_ASSERT((short)x == (short)y); return #x " = " #y;

const char *NTAPI Symbols::SqlType(short DataType)
{
	switch (DataType)
	{
		$(0x0001, SQL_CHAR)
		$(0x0002, SQL_NUMERIC)
		$(0x0003, SQL_DECIMAL)
		$(0x0004, SQL_INTEGER)
		$(0x0005, SQL_SMALLINT)
		$(0x0006, SQL_FLOAT)
		$(0x0007, SQL_REAL)
		$(0x0008, SQL_DOUBLE)
		$(0x0009, SQL_DATE)
		$(0x000A, SQL_TIME)
		$(0x000B, SQL_TIMESTAMP)
		$(0x000C, SQL_VARCHAR)
		$(0x005B, SQL_TYPE_DATE)
		$(0x005C, SQL_TYPE_TIME)
		$(0x005D, SQL_TYPE_TIMESTAMP)
		$(0x0065, SQL_INTERVAL_YEAR)
		$(0x0066, SQL_INTERVAL_MONTH)
		$(0x0067, SQL_INTERVAL_DAY)
		$(0x0068, SQL_INTERVAL_HOUR)
		$(0x0069, SQL_INTERVAL_MINUTE)
		$(0x006A, SQL_INTERVAL_SECOND)
		$(0x006B, SQL_INTERVAL_YEAR_TO_MONTH)
		$(0x006C, SQL_INTERVAL_DAY_TO_HOUR)
		$(0x006D, SQL_INTERVAL_DAY_TO_MINUTE)
		$(0x006E, SQL_INTERVAL_DAY_TO_SECOND)
		$(0x006F, SQL_INTERVAL_HOUR_TO_MINUTE)
		$(0x0070, SQL_INTERVAL_HOUR_TO_SECOND)
		$(0x0071, SQL_INTERVAL_MINUTE_TO_SECOND)
		$(0xFFFF, SQL_LONGVARCHAR)
		$(0xFFFE, SQL_BINARY)
		$(0xFFFD, SQL_VARBINARY)
		$(0xFFFC, SQL_LONGVARBINARY)
		$(0xFFFB, SQL_BIGINT)
		$(0xFFFA, SQL_TINYINT)
		$(0xFFF9, SQL_BIT)
		$(0xFFF8, SQL_WCHAR)
		$(0xFFF7, SQL_WVARCHAR)
		$(0xFFF6, SQL_WLONGVARCHAR)
		$(0xFFF5, SQL_GUID)
	}
	return (const char *) DataType;
}

const char *NTAPI Symbols::SqlCType(short DataType)
{
	switch (DataType)
	{
		$(0x0001, SQL_C_CHAR)
		$(0x0002, SQL_C_NUMERIC)
		$(0x0004, SQL_C_LONG)
		$(0x0005, SQL_C_SHORT)
		$(0x0007, SQL_C_FLOAT)
		$(0x0008, SQL_C_DOUBLE)
		$(0x0009, SQL_C_DATE)
		$(0x005B, SQL_C_TYPE_DATE)
		$(0x005C, SQL_C_TYPE_TIME)
		$(0x005D, SQL_C_TYPE_TIMESTAMP)
		$(0x0065, SQL_C_INTERVAL_YEAR)
		$(0x0066, SQL_C_INTERVAL_MONTH)
		$(0x0067, SQL_C_INTERVAL_DAY)
		$(0x0068, SQL_C_INTERVAL_HOUR)
		$(0x0069, SQL_C_INTERVAL_MINUTE)
		$(0x006A, SQL_C_INTERVAL_SECOND)
		$(0x006B, SQL_C_INTERVAL_YEAR_TO_MONTH)
		$(0x006C, SQL_C_INTERVAL_DAY_TO_HOUR)
		$(0x006D, SQL_C_INTERVAL_DAY_TO_MINUTE)
		$(0x006E, SQL_C_INTERVAL_DAY_TO_SECOND)
		$(0x006F, SQL_C_INTERVAL_HOUR_TO_MINUTE)
		$(0x0070, SQL_C_INTERVAL_HOUR_TO_SECOND)
		$(0x0071, SQL_C_INTERVAL_MINUTE_TO_SECOND)
		$(0xFFFE, SQL_C_BINARY)
		$(0xFFFA, SQL_C_TINYINT)
		$(0xFFF9, SQL_C_BIT)
		$(0xFFF5, SQL_C_GUID)
		$(0xFFE7, SQL_C_SBIGINT)
		$(0xFFE5, SQL_C_UBIGINT)
		$(0xFFF0, SQL_C_SLONG)
		$(0xFFEE, SQL_C_ULONG)
		$(0xFFF1, SQL_C_SSHORT)
		$(0xFFEF, SQL_C_USHORT)
		$(0xFFE6, SQL_C_STINYINT)
		$(0xFFE4, SQL_C_UTINYINT)
	}
	return (const char *) DataType;
}

const char *NTAPI Symbols::SqlDriverCompletion(short DriverCompletion)
{
	switch (DriverCompletion)
	{
		$(0x0000, SQL_DRIVER_NOPROMPT)
		$(0x0001, SQL_DRIVER_COMPLETE)
		$(0x0002, SQL_DRIVER_PROMPT)
		$(0x0003, SQL_DRIVER_COMPLETE_REQUIRED)
	}
	return (const char *) DriverCompletion;
}

#undef $
